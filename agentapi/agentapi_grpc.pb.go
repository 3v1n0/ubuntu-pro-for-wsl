// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: agentapi.proto

package agentapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UIClient is the client API for UI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UIClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongRequest, error)
}

type uIClient struct {
	cc grpc.ClientConnInterface
}

func NewUIClient(cc grpc.ClientConnInterface) UIClient {
	return &uIClient{cc}
}

func (c *uIClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongRequest, error) {
	out := new(PongRequest)
	err := c.cc.Invoke(ctx, "/agentapi.UI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UIServer is the server API for UI service.
// All implementations must embed UnimplementedUIServer
// for forward compatibility
type UIServer interface {
	Ping(context.Context, *PingRequest) (*PongRequest, error)
	mustEmbedUnimplementedUIServer()
}

// UnimplementedUIServer must be embedded to have forward compatible implementations.
type UnimplementedUIServer struct {
}

func (UnimplementedUIServer) Ping(context.Context, *PingRequest) (*PongRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedUIServer) mustEmbedUnimplementedUIServer() {}

// UnsafeUIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UIServer will
// result in compilation errors.
type UnsafeUIServer interface {
	mustEmbedUnimplementedUIServer()
}

func RegisterUIServer(s grpc.ServiceRegistrar, srv UIServer) {
	s.RegisterService(&UI_ServiceDesc, srv)
}

func _UI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentapi.UI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UI_ServiceDesc is the grpc.ServiceDesc for UI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agentapi.UI",
	HandlerType: (*UIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _UI_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agentapi.proto",
}

// WSLInstanceClient is the client API for WSLInstance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WSLInstanceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongRequest, error)
}

type wSLInstanceClient struct {
	cc grpc.ClientConnInterface
}

func NewWSLInstanceClient(cc grpc.ClientConnInterface) WSLInstanceClient {
	return &wSLInstanceClient{cc}
}

func (c *wSLInstanceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongRequest, error) {
	out := new(PongRequest)
	err := c.cc.Invoke(ctx, "/agentapi.WSLInstance/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WSLInstanceServer is the server API for WSLInstance service.
// All implementations must embed UnimplementedWSLInstanceServer
// for forward compatibility
type WSLInstanceServer interface {
	Ping(context.Context, *PingRequest) (*PongRequest, error)
	mustEmbedUnimplementedWSLInstanceServer()
}

// UnimplementedWSLInstanceServer must be embedded to have forward compatible implementations.
type UnimplementedWSLInstanceServer struct {
}

func (UnimplementedWSLInstanceServer) Ping(context.Context, *PingRequest) (*PongRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedWSLInstanceServer) mustEmbedUnimplementedWSLInstanceServer() {}

// UnsafeWSLInstanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WSLInstanceServer will
// result in compilation errors.
type UnsafeWSLInstanceServer interface {
	mustEmbedUnimplementedWSLInstanceServer()
}

func RegisterWSLInstanceServer(s grpc.ServiceRegistrar, srv WSLInstanceServer) {
	s.RegisterService(&WSLInstance_ServiceDesc, srv)
}

func _WSLInstance_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WSLInstanceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agentapi.WSLInstance/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WSLInstanceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WSLInstance_ServiceDesc is the grpc.ServiceDesc for WSLInstance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WSLInstance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "agentapi.WSLInstance",
	HandlerType: (*WSLInstanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _WSLInstance_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agentapi.proto",
}
