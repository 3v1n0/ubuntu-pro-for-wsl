name: Build debian package
description: Builds a debian package and uploads the artifact

inputs:
  source-dir:
    required: false
    description: "Directory where the source is located"
  docker-image:
    required: false
    default: ubuntu:rolling
    description: "The docker image used to build the package"
  token:
    required: false
    description: "If provided, used for github login in the source build"

runs:
  using: "composite"
  steps:
    - name: Append commit SHA to local version
      shell: bash
      working-directory: ${{ inputs.source-dir }}
      run: |
        DEBIAN_FRONTEND=noninteractive sudo apt install -y devscripts
        debchange --local "+${{ github.sha }}" "Github build. Job id: ${{ github.run_id }}. Attempt: ${{ github.run_number }}."
    - name: Parse metadata
      shell: bash
      working-directory: ${{ inputs.source-dir }}
      run: |
        # Parsing name and version
        echo PKG_NAME="$( dpkg-parsechangelog --show-field source )" >> $GITHUB_ENV
        echo PKG_VERSION="$( dpkg-parsechangelog --show-field version )" >> $GITHUB_ENV
    - name: Prepare source build
      shell: bash
      run: |
        echo SOURCE_DIR="$( mktemp --directory --tmpdir='${{ inputs.source-dir }}' )" >> $GITHUB_ENV
    - name: Build source package
      uses: jtdor/build-deb-action@v1
      with:
        artifacts-dir: ${{ env.SOURCE_DIR }}
        source-dir: ${{ inputs.source-dir }}
        docker-image: ${{ inputs.docker-image }}
        buildpackage-opts: --build=source
        extra-build-deps: ca-certificates git
        before-build-hook: |
          GITHUB_TOKEN="${{ inputs.token }}"
          if [ -n "${GITHUB_TOKEN}" ]; then
            git config --system url."https://api:${GITHUB_TOKEN}@github.com/".insteadOf "https://github.com/"
          fi
    - name: Extract source package
      shell: bash
      working-directory: ${{ env.SOURCE_DIR }}
      run: |
        dpkg-source --extract *.dsc
        echo SOURCE_DIR="${SOURCE_DIR}/${{ env.PKG_NAME }}-${{ env.PKG_VERSION }}" >> $GITHUB_ENV
    - name: Create output directory
      shell: bash
      run: |
        echo OUTPUT_DIR="$( mktemp --directory --tmpdir='${{ inputs.source-dir }}' )" >> $GITHUB_ENV
    - name: Build debian package
      uses: jtdor/build-deb-action@v1
      with:
        artifacts-dir: ${{ env.OUTPUT_DIR }}
        source-dir: ${{ env.SOURCE_DIR }}
        docker-image: ${{ inputs.docker-image }}
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PKG_NAME }}_${{ env.PKG_VERSION }}
        path: ${{ env.OUTPUT_DIR }}/
        if-no-files-found: error
